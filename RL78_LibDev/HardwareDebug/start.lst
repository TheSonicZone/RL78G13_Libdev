   1                             	# 1 "../core/start.S"
   1                             	/************************************************************************/
   0                             	
   0                             	
   0                             	
   2                             	/*    File Version: V1.06                                               */
   3                             	/*    Date Generated: 01/09/2021                                        */
   4                             	/************************************************************************/
   5                             	
   6                             	    /*reset_program.asm*/
   7                             	
   8                             	    .list
   9                             	
  10                             	#ifdef CPPAPP    
  11                             	___dso_handle:
  12                             	    .global ___dso_handle
  13                             	#endif
  14                             		
  15                             		.global	__rl78_fini
  17                             			__rl78_fini:
  18 0000 EF FE                   			br $__rl78_fini
  19                             	
  20                             	
  21                             	    .extern _HardwareSetup /*! external Sub-routine to initialise Hardware*/
  22                             	    .extern _data
  23                             	    .extern _mdata
  24                             	    .extern _ebss
  25                             	    .extern _bss
  26                             	    .extern _edata
  27                             	    .extern _main 
  28                             	    .extern _stack
  29                             	
  30                             	    /*  ;; HL = start of list
  31                             	        ;; DE = end of list
  32                             	        ;; BC = step direction (+2 or -2)
  33                             	    */
  34                             	    
  35                             	    .text
  36                             	
  37                             	    .global	_PowerON_Reset  /*! global Start routine */
  39                             	/* call to _PowerON_Reset */
  40                             	_PowerON_Reset:
  41                             	/* initialise user stack pointer */
  42 0002 CB F8 00 00             	    movw sp,#_stack /* Set stack pointer */
  43                             	
  44                             	
  45                             	/* load data section from ROM to RAM */    
  46                             	;; block move to initialize .data
  47                             	
  48                             	        ;; we're copying from 00:[_romdatastart] to 0F:[_datastart]
  49                             	        ;; and our data is not in the mirrored area.
  50 0006 41 00                   	    mov     es, #0
  51                             	#ifndef __RL78_G10__
  52 0008 61 CF                   	    sel     rb0         /*  ;;bank 0 */
  53                             	#endif    
  54                             	
  55 000a 34 00 00                	    movw    de, #_mdata    /* src ROM address of data section in de */
  56 000d 36 00 00                	    movw    hl, #_data     /* dest start RAM address of data section in hl */
  57                             	        
  58                             	#ifndef __RL78_G10__
  59 0010 61 DF                   	    sel     rb1              /* bank 1 */
  60 0012 36 00 00                	    movw    hl, #_data     /* dest start RAM address of data section in hl */
  61                             	#endif
  62 0015 30 00 00                	    movw    ax, #_edata   /*    ;; size of romdata section in ax */
  63 0018 27                      	    subw    ax,hl          /* store data size */
  64 0019 31 1E                   	    shrw    ax,1
  65                             	1:
  66 001b 44 00 00                	    cmpw    ax, #0           /* check if end of data */
  67 001e DD 0E                   	    bz      $1f
  68 0020 B1                      	    decw    ax
  69                             	#ifdef __RL78_G10__
  70                             	    movw     bc, ax            /* save ax value in bc */
  71                             	#endif
  72                             	    
  73                             	#ifndef __RL78_G10__
  74 0021 61 CF                   	    sel     rb0             /* bank 0 */
  75                             	#endif
  76 0023 11 A9                   	    movw    ax, es:[de]
  77 0025 BB                      	    movw    [hl], ax
  78 0026 A5                      	    incw    de
  79 0027 A5                      	    incw    de
  80 0028 A7                      	    incw    hl
  81 0029 A7                      	    incw    hl
  82                             	#ifndef __RL78_G10__
  83 002a 61 DF                   	    sel     rb1         /* bank 1  -  compare and decrement*/
  84                             	#endif
  85                             	
  86                             	#ifdef __RL78_G10__
  87                             	    movw     ax, bc            /* restore ax value */
  88                             	#endif
  89 002c EF ED                   	    br      $1b
  90                             	1:
  91                             	
  92                             	    
  93                             	/* bss initialisation : zero out bss */
  94                             	#ifndef __RL78_G10__
  95 002e 61 CF                   	    sel     rb0         /* bank 0 */
  96 0030 30 00 00                	    movw    ax, #0        /* load AX reg with zero */
  97 0033 61 DF                   	    sel     rb1         /* bank 1 */
  98 0035 30 00 00                	    movw    ax, #_ebss  /* store the end address (size of) bss section in ax */
  99 0038 36 00 00                	    movw    hl, #_bss      /* store the start address of bss in hl */
 100 003b 27                      	    subw    ax,hl ;; store data size
 101 003c 31 1E                   	    shrw    ax,1
 102                             	#endif
 103                             	
 104                             	#ifdef __RL78_G10__
 105                             	    movw    hl, #_bss      /* store the start address of bss in hl */
 106                             	    movw    ax, #_ebss  /* store the end address (size of) bss section in ax */
 107                             	    subw    ax,hl ;; store data size
 108                             	    shrw    ax,1
 109                             	#endif    
 110                             	    
 111                             	    
 112                             	1:
 113 003e 44 00 00                	    cmpw    ax, #0
 114 0041 DD 0A                   	    bz      $1f
 115 0043 B1                      	    decw    ax
 116                             	#ifdef __RL78_G10__    
 117                             	    movw     bc, ax        /* save ax value in bc */
 118                             	    movw    ax, #0
 119                             	#endif    
 120                             	#ifndef __RL78_G10__        
 121 0044 61 CF                   	    sel     rb0         /* bank 0 */
 122                             	#endif        
 123 0046 BB                      	    movw    [hl], ax
 124 0047 A7                      	    incw    hl
 125 0048 A7                      	    incw    hl
 126                             	#ifdef __RL78_G10__        
 127                             	    movw    ax, bc        /* restore ax value */
 128                             	#endif        
 129                             	#ifndef __RL78_G10__        
 130 0049 61 DF                   	    sel     rb1
 131                             	#endif    
 132 004b EF F1                   	    br      $1b
 133                             	1:
 134                             	#ifndef __RL78_G10__
 135 004d 61 CF                   	    sel     rb0             /* bank 0 */
 136                             	#endif
 137                             	    
 138                             	/* Initialize global constructors in case of CPP app */
 139                             	#ifdef CPPAPP
 140                             		movw    de, #___ctors
 141                             	1:
 142                             		movw	ax, #___ctors_end
 143                             		cmpw	ax, de
 144                             		bnh	$2f
 145                             		mov	es, #0
 146                             		movw	ax, es:[de]
 147                             		push	de
 148                             		call	ax
 149                             		pop	de
 150                             		incw	de
 151                             		incw	de
 152                             		br	$1b
 153                             	2:
 154                             	#endif
 155                             	
 156                             	
 157                             	/* call the hardware initialiser */
 158 004f FC 00 00 00             	    call    !!_HardwareSetup
 159 0053 00                      	    nop
 160                             	
 161                             	/* start user program */
 162                             	
 163 0054 30 00 00                	    movw    ax, #0
 164 0057 C1                      	    push    ax      /* envp */
 165 0058 C1                      	    push    ax      /* argv */
 166 0059 C1                      	    push    ax      /* argc */
 167 005a FC 00 00 00             	    call    !!_main
 168                             	
 169                             	/* Initialize global destructors in case of CPP app */
 170                             	#ifdef CPPAPP
 171                             		movw    de, #___dtors
 172                             	1:
 173                             		movw	ax, #___dtors_end
 174                             		cmpw	ax, de
 175                             		bnh		$2f
 176                             		mov		es, #0
 177                             		movw	ax, es:[de]
 178                             		push	de
 179                             		call	ax
 180                             		pop		de
 181                             		incw	de
 182                             		incw	de
 183                             		br		$1b
 184                             	2:
 185                             	#endif
 186                             	
 187                             		.global	_exit
 189                             	/* call to exit*/
 190                             	_exit:
 191 005e EF FE                   	     br    $_exit
 192                             	
 193                             	    .end             
